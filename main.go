package main

import (
	"fmt"

	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"

	"CollyHoroscope/config"
	"CollyHoroscope/horoscope"
	"CollyHoroscope/quotes"
	"CollyHoroscope/tarot"
	"CollyHoroscope/utils"
)

func main() {
	bot, err := telego.NewBot(config.BotToken, telego.WithDefaultDebugLogger())
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞:", err)
		return
	}

	updates, _ := bot.UpdatesViaLongPolling(nil)
	bh, _ := th.NewBotHandler(bot, updates)
	defer bh.Stop()
	defer bot.StopLongPolling()

	bh.Handle(startHandler(bot), th.CommandEqual("start"))
	bh.Handle(callbackHandler(bot), th.AnyCallbackQuery())
	bh.Start()
}

func startHandler(bot *telego.Bot) th.Handler {
	return func(bot *telego.Bot, update telego.Update) {
		keyboard := tu.InlineKeyboard(
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("‚ôà –û–≤–µ–Ω").WithCallbackData("–û–≤–µ–Ω"),
				tu.InlineKeyboardButton("‚ôâ –¢–µ–ª–µ—Ü").WithCallbackData("–¢–µ–ª–µ—Ü"),
				tu.InlineKeyboardButton("‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã").WithCallbackData("–ë–ª–∏–∑–Ω–µ—Ü—ã"),
			),
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("‚ôã –†–∞–∫").WithCallbackData("–†–∞–∫"),
				tu.InlineKeyboardButton("‚ôå –õ–µ–≤").WithCallbackData("–õ–µ–≤"),
				tu.InlineKeyboardButton("‚ôç –î–µ–≤–∞").WithCallbackData("–î–µ–≤–∞"),
			),
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("‚ôé –í–µ—Å—ã").WithCallbackData("–í–µ—Å—ã"),
				tu.InlineKeyboardButton("‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω").WithCallbackData("–°–∫–æ—Ä–ø–∏–æ–Ω"),
				tu.InlineKeyboardButton("‚ôê –°—Ç—Ä–µ–ª–µ—Ü").WithCallbackData("–°—Ç—Ä–µ–ª–µ—Ü"),
			),
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("‚ôë –ö–æ–∑–µ—Ä–æ–≥").WithCallbackData("–ö–æ–∑–µ—Ä–æ–≥"),
				tu.InlineKeyboardButton("‚ôí –í–æ–¥–æ–ª–µ–π").WithCallbackData("–í–æ–¥–æ–ª–µ–π"),
				tu.InlineKeyboardButton("‚ôì –†—ã–±—ã").WithCallbackData("–†—ã–±—ã"),
			),
			tu.InlineKeyboardRow(
				tu.InlineKeyboardButton("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ").WithCallbackData("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"),
				tu.InlineKeyboardButton("üÉè –¢–∞—Ä–æ").WithCallbackData("–¢–∞—Ä–æ"), // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¢–∞—Ä–æ
			),
		)

		_, _ = bot.SendMessage(tu.Message(
			tu.ID(update.Message.Chat.ID),
			"–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –¢–∞—Ä–æ",
		).WithReplyMarkup(keyboard))
	}
}

func callbackHandler(bot *telego.Bot) th.Handler {
	return func(bot *telego.Bot, update telego.Update) {
		callbackData := update.CallbackQuery.Data
		chatID := update.CallbackQuery.From.ID

		responseText, imagePath := handleCallback(callbackData)
		if imagePath != "" {
			_, err := bot.SendPhoto(&telego.SendPhotoParams{
				ChatID:  tu.ID(chatID),
				Photo:   tu.File(utils.MustOpen(imagePath)),
				Caption: responseText,
			})
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: %v\n", err)
			}
		} else {
			_, _ = bot.SendMessage(tu.Message(
				tu.ID(chatID),
				responseText,
			))
		}
	}
}

func handleCallback(callbackData string) (string, string) {
	switch callbackData {
	case "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
		return quotes.GetRandomQuote(), config.ImagePaths["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"]
	case "–¢–∞—Ä–æ":
		card := tarot.GetRandomCard()
		return fmt.Sprintf("%s: %s", card.Name, card.Description), card.ImagePath
	default:
		if sign, exists := config.HoroscopeSigns[callbackData]; exists {
			return horoscope.GetHoroscope(sign), config.ImagePaths["–ì–æ—Ä–æ—Å–∫–æ–ø"]
		}
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä!", ""
	}
}
